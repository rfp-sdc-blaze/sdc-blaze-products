import { Client, Pool } from "pg";
require("dotenv").config();

async function setupPostgreSQLDB() {
  console.log("starting psql setup");

  const client = new Client({
    database: "template1",
    user: process.env.DB_USER,
    password: process.env.DB_PW,
  });

  // attempt to establish a connection
  try {
    await client.connect();
    await client.query(`DROP DATABASE IF EXISTS products_api;`);
    await client.query(`CREATE DATABASE products_api;`);
    await client.end();
    console.log("successfully created psql db");
  } catch (e) {
    await client.end();
    console.error(e);
  }

  const pool = new Pool({
    database: process.env.DB_NAME,
    user: process.env.DB_USER,
    password: process.env.DB_PW,
  });

  try {
    console.log("setting up schemas...");
    await pool.query(`
      CREATE TABLE IF NOT EXISTS info
      (
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name character varying(100) NOT NULL,
        slogan character varying(255) NOT NULL,
        description character varying(510) NOT NULL,
        category character varying(50) NOT NULL,
        default_price character varying(20)
      );

      CREATE TABLE IF NOT EXISTS features
      (
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        product_id integer NOT NULL REFERENCES info (id) ON DELETE CASCADE,
        feature character varying(50) NOT NULL,
        value character varying(50) NOT NULL
      );

      CREATE TABLE IF NOT EXISTS related
      (
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        current_product_id integer NOT NULL REFERENCES info (id) ON DELETE CASCADE,
        related_product_id integer NOT NULL
      );

      CREATE TABLE IF NOT EXISTS styles
      (
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        productId integer NOT NULL REFERENCES info (id) ON DELETE CASCADE,
        name character varying(50) NOT NULL,
        sale_price character varying(50),
        original_price character varying(20),
        default_style boolean DEFAULT FALSE
      );

      CREATE TABLE IF NOT EXISTS skus
      (
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        styleId integer NOT NULL REFERENCES styles (id) ON DELETE CASCADE,
        size character varying(8) NOT NULL,
        quantity integer NOT NULL DEFAULT 0
      );

      CREATE TABLE IF NOT EXISTS photos
      (
        id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        style_id integer NOT NULL REFERENCES styles (id) ON DELETE CASCADE,
        url text,
        thumbnail_url text
      )
    `);

    console.log("schemas are setup");
    console.log("loading csv data...");

    // import csv data (bum bum bummmmmmmmm)
    await Promise.all([
      await pool.query(`
        COPY info (id, name, slogan, description, category, default_price)
          FROM '${process.env.CSV_BASE_PATH}/product.csv'
          WITH CSV HEADER;
      `),
      await pool.query(`
        COPY features (id, product_id, feature, value)
          FROM '${process.env.CSV_BASE_PATH}/features.csv'
          WITH CSV HEADER;
      `),
      await pool.query(`
        COPY related (id, current_product_id, related_product_id)
          FROM '${process.env.CSV_BASE_PATH}/related.csv'
          WITH CSV HEADER;
      `),
      await pool.query(`
        COPY styles (id, productId, name, sale_price, original_price, default_style)
          FROM '${process.env.CSV_BASE_PATH}/styles.csv'
          WITH CSV HEADER;
      `),
      await pool.query(`
        COPY skus (id, styleId, size, quantity)
          FROM '${process.env.CSV_BASE_PATH}/skus.csv'
          WITH CSV HEADER;
      `),
      await pool.query(`
        COPY photos (id, style_id, url, thumbnail_url)
          FROM '${process.env.CSV_BASE_PATH}/photos.csv'
          WITH CSV HEADER;
      `),
    ]);

    console.log("successfully imported csv data");
    console.log("setup complete");
  } catch (e) {
    console.error(e);
  }
  await pool.end();
}

setupPostgreSQLDB();
